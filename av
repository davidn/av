#!/usr/bin/env python
import os, atexit, dbus, gobject
import requests
from dbus.mainloop import glib

class AVController(object):
    def shutdown(self):
        requests.post('http://192.168.0.13/YamahaRemoteControl/ctrl', data='<YAMAHA_AV cmd="PUT"><Main_Zone><Power_Control><Power>Standby</Power></Power_Control></Main_Zone></YAMAHA_AV>')

    def start(self):
        requests.post('http://192.168.0.13/YamahaRemoteControl/ctrl', data='<YAMAHA_AV cmd="PUT"><Main_Zone><Power_Control><Power>On</Power></Power_Control></Main_Zone></YAMAHA_AV>')

class LoginController(object):
    def __init__(self, bus, controller):
      self.fd = None
      self.controller = controller
      self.proxy = bus.get_object( 'org.freedesktop.login1',
                                  '/org/freedesktop/login1' )
      self.login1 = dbus.Interface(self.proxy, 'org.freedesktop.login1.Manager')
      for signal in ['PrepareForSleep', 'PrepareForShutdown']:
        self.login1.connect_to_signal(signal, self.signal_handler(),
                                      member_keyword='member')
      atexit.register(lambda: self.uninhibit())
      self.inhibit()

    def inhibit(self):
      self.fd = self.login1.Inhibit( 'shutdown:sleep', 'av',
                         'disabling av before/shutdown ...',
                         'delay' )

    def uninhibit(self):
      if self.fd:
        os.close( self.fd.take() )
        self.fd = None

    def signal_handler(self):
        def fun(boolean, member=None):
            if boolean:  ## going to suspend/hibernate or shutdown
                self.controller.shutdown()
                self.uninhibit()
            else:  ## resume/thaw
                if member == 'PrepareForSleep':
                    self.controller.start()
                    self.inhibit()
        return fun


if __name__ == '__main__':
    av = AVController()
    av.start()
    glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SystemBus()
    controller = LoginController(bus, av)
    gobject.MainLoop().run()

